// See https://aka.ms/new-console-template for more information
using Azure.Identity;
using ChecksumCosmosClient;
using Microsoft.Azure.Cosmos;

Console.WriteLine("Hello, World!");

var largePropertyBag = "\"properties\": {\r\n    \"displayName\": \"API Management APIs should use only encrypted protocols\",\r\n    \"policyType\": \"BuiltIn\",\r\n    \"mode\": \"All\",\r\n    \"description\": \"To ensure security of data in transit, APIs should be available only through encrypted protocols, like HTTPS or WSS. Avoid using unsecured protocols, such as HTTP or WS.\",\r\n    \"metadata\": {\r\n      \"version\": \"2.0.2\",\r\n      \"category\": \"API Management\"\r\n    },\r\n    \"version\": \"2.0.2\",\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        },\r\n        \"allowedValues\": [\r\n          \"Audit\",\r\n          \"Disabled\",\r\n          \"Deny\"\r\n        ],\r\n        \"defaultValue\": \"Audit\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [\r\n          {\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.ApiManagement/service/apis\"\r\n          },\r\n          {\r\n            \"count\": {\r\n              \"field\": \"Microsoft.ApiManagement/service/apis/protocols[*]\",\r\n              \"where\": {\r\n                \"anyOf\": [\r\n                  {\r\n                    \"field\": \"Microsoft.ApiManagement/service/apis/protocols[*]\",\r\n                    \"equals\": \"http\"\r\n                  },\r\n                  {\r\n                    \"field\": \"Microsoft.ApiManagement/service/apis/protocols[*]\",\r\n                    \"equals\": \"ws\"\r\n                  }\r\n                ]\r\n              }\r\n            },\r\n            \"greaterOrEquals\": 1\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\"\r\n      }\r\n    },\r\n    \"versions\": [\r\n      \"2.0.2\"\r\n    ]\r\n  },";
var extraLargePropertyBag = "\r\n{\r\n  \"properties\": {\r\n    \"displayName\": \"Configure network security groups to enable traffic analytics\",\r\n    \"description\": \"Traffic analytics can be enabled for all network security groups hosted in a particular region with the settings provided during policy creation. If it already has Traffic analytics enabled, then policy does not overwrite its settings. Flow Logs are also enabled for the Network security groups that do not have it. Traffic analytics is a cloud-based solution that provides visibility into user and application activity in cloud networks.\",\r\n    \"policyType\": \"BuiltIn\",\r\n    \"mode\": \"Indexed\",\r\n    \"metadata\": {\r\n      \"version\": \"1.2.0\",\r\n      \"category\": \"Network\"\r\n    },\r\n    \"version\": \"1.2.0\",\r\n    \"parameters\": {\r\n      \"effect\": {\r\n        \"type\": \"string\",\r\n        \"defaultValue\": \"DeployIfNotExists\",\r\n        \"allowedValues\": [\r\n          \"DeployIfNotExists\",\r\n          \"Disabled\"\r\n        ],\r\n        \"metadata\": {\r\n          \"displayName\": \"Effect\",\r\n          \"description\": \"Enable or disable the execution of the policy\"\r\n        }\r\n      },\r\n      \"nsgRegion\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Network security group Region\",\r\n          \"description\": \"Configures for network security groups in the selected region only.\",\r\n          \"strongType\": \"location\"\r\n        }\r\n      },\r\n      \"storageId\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Storage Resource ID\",\r\n          \"description\": \"Resource ID of the storage account where the flow logs are written. Make sure this storage account is located in the selected network security group Region. The format must be: '/subscriptions/{subscription id}/resourceGroups/{resourceGroup name}/providers/Microsoft.Storage/storageAccounts/{storage account name}\",\r\n          \"assignPermissions\": true\r\n        }\r\n      },\r\n      \"timeInterval\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Traffic analytics processing interval in minutes\",\r\n          \"description\": \"Traffic analytics processes blobs at the selected frequency.\"\r\n        },\r\n        \"defaultValue\": \"60\",\r\n        \"allowedValues\": [\r\n          \"10\",\r\n          \"60\"\r\n        ]\r\n      },\r\n      \"workspaceResourceId\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Workspace resource ID\",\r\n          \"description\": \"Log Analytics workspace resource id\",\r\n          \"assignPermissions\": true\r\n        }\r\n      },\r\n      \"workspaceRegion\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Workspace region\",\r\n          \"description\": \"Log Analytics workspace region\",\r\n          \"strongType\": \"location\"\r\n        }\r\n      },\r\n      \"workspaceId\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Workspace ID\",\r\n          \"description\": \"Log Analytics workspace GUID\"\r\n        }\r\n      },\r\n      \"networkWatcherRG\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Network Watcher resource group\",\r\n          \"description\": \"The Network Watcher regional instance is present in this resource group. The network security group flow logs resources are also created. This will be used only if a deployment is required. By default, it is named 'NetworkWatcherRG'.\",\r\n          \"strongType\": \"existingResourceGroups\"\r\n        }\r\n      },\r\n      \"networkWatcherName\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Network Watcher name\",\r\n          \"description\": \"The name of the network watcher under which the flow log resources are created. Make sure it belongs to the same region as the network security group.\"\r\n        }\r\n      },\r\n      \"retentionDays\": {\r\n        \"type\": \"String\",\r\n        \"metadata\": {\r\n          \"displayName\": \"Number of days to retain flowlogs\",\r\n          \"description\": \"The number of days for which flowlog data will be retained in storage account. If you want to retain data forever and do not want to apply any retention policy, set retention (days) to 0.\"\r\n        },\r\n        \"defaultValue\": \"30\"\r\n      }\r\n    },\r\n    \"policyRule\": {\r\n      \"if\": {\r\n        \"allOf\": [\r\n          {\r\n            \"field\": \"type\",\r\n            \"equals\": \"Microsoft.Network/networkSecurityGroups\"\r\n          },\r\n          {\r\n            \"field\": \"location\",\r\n            \"equals\": \"[parameters('nsgRegion')]\"\r\n          }\r\n        ]\r\n      },\r\n      \"then\": {\r\n        \"effect\": \"[parameters('effect')]\",\r\n        \"details\": {\r\n          \"type\": \"Microsoft.Network/networkWatchers/flowlogs\",\r\n          \"resourceGroupName\": \"[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), parameters('networkWatcherRG'), split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[4])]\",\r\n          \"name\": \"[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id'))), 'null/null', concat(split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[8], '/', split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[10]))]\",\r\n          \"existenceCondition\": {\r\n            \"anyof\": [\r\n              {\r\n                \"field\": \"Microsoft.Network/networkWatchers/flowLogs/enabled\",\r\n                \"equals\": \"false\"\r\n              },\r\n              {\r\n                \"allof\": [\r\n                  {\r\n                    \"field\": \"Microsoft.Network/networkWatchers/flowLogs/enabled\",\r\n                    \"equals\": \"true\"\r\n                  },\r\n                  {\r\n                    \"field\": \"Microsoft.Network/networkWatchers/flowLogs/flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled\",\r\n                    \"equals\": \"true\"\r\n                  },\r\n                  {\r\n                    \"field\": \"Microsoft.Network/networkWatchers/flowLogs/flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.trafficAnalyticsInterval\",\r\n                    \"in\": [\r\n                      \"10\",\r\n                      \"60\"\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          },\r\n          \"roleDefinitionIds\": [\r\n            \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\"\r\n          ],\r\n          \"deployment\": {\r\n            \"properties\": {\r\n              \"mode\": \"incremental\",\r\n              \"template\": {\r\n                \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n                \"contentVersion\": \"1.0.0.0\",\r\n                \"parameters\": {\r\n                  \"storageId\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"timeInterval\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"workspaceId\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"workspaceRegion\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"workspaceResourceId\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"networkWatcherRG\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"networkWatcherName\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"flowlogName\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"location\": {\r\n                    \"type\": \"String\"\r\n                  },\r\n                  \"targetResource\": {\r\n                    \"type\": \"string\"\r\n                  },\r\n                  \"retentionDays\": {\r\n                    \"type\": \"string\"\r\n                  }\r\n                },\r\n                \"resources\": [\r\n                  {\r\n                    \"type\": \"Microsoft.Resources/deployments\",\r\n                    \"name\": \"[concat('flowlogDeployment-', uniqueString(parameters('flowlogName')))]\",\r\n                    \"apiVersion\": \"2019-10-01\",\r\n                    \"resourceGroup\": \"[parameters('networkWatcherRG')]\",\r\n                    \"properties\": {\r\n                      \"mode\": \"incremental\",\r\n                      \"parameters\": {},\r\n                      \"template\": {\r\n                        \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n                        \"contentVersion\": \"1.0.0.0\",\r\n                        \"parameters\": {},\r\n                        \"resources\": [\r\n                          {\r\n                            \"type\": \"Microsoft.Network/networkWatchers/flowLogs\",\r\n                            \"name\": \"[concat(parameters('networkWatcherName'), '/', parameters('flowlogName'))]\",\r\n                            \"apiVersion\": \"2019-11-01\",\r\n                            \"location\": \"[parameters('location')]\",\r\n                            \"properties\": {\r\n                              \"targetResourceId\": \"[parameters('targetResource')]\",\r\n                              \"storageId\": \"[parameters('storageId')]\",\r\n                              \"enabled\": \"true\",\r\n                              \"flowAnalyticsConfiguration\": {\r\n                                \"networkWatcherFlowAnalyticsConfiguration\": {\r\n                                  \"enabled\": true,\r\n                                  \"workspaceId\": \"[parameters('workspaceId')]\",\r\n                                  \"workspaceRegion\": \"[parameters('workspaceRegion')]\",\r\n                                  \"workspaceResourceId\": \"[parameters('workspaceResourceId')]\",\r\n                                  \"trafficAnalyticsInterval\": \"[parameters('timeInterval')]\"\r\n                                }\r\n                              },\r\n                              \"retentionPolicy\": {\r\n                                \"days\": \"[parameters('retentionDays')]\",\r\n                                \"enabled\": \"true\"\r\n                              },\r\n                              \"format\": {\r\n                                \"type\": \"JSON\",\r\n                                \"version\": 2\r\n                              }\r\n                            }\r\n                          }\r\n                        ]\r\n                      }\r\n                    }\r\n                  }\r\n                ]\r\n              },\r\n              \"parameters\": {\r\n                \"storageId\": {\r\n                  \"value\": \"[parameters('storageId')]\"\r\n                },\r\n                \"timeInterval\": {\r\n                  \"value\": \"[parameters('timeInterval')]\"\r\n                },\r\n                \"workspaceId\": {\r\n                  \"value\": \"[parameters('workspaceId')]\"\r\n                },\r\n                \"workspaceRegion\": {\r\n                  \"value\": \"[parameters('workspaceRegion')]\"\r\n                },\r\n                \"workspaceResourceId\": {\r\n                  \"value\": \"[parameters('workspaceResourceId')]\"\r\n                },\r\n                \"networkWatcherRG\": {\r\n                  \"value\": \"[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), parameters('networkWatcherRG'), split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[4])]\"\r\n                },\r\n                \"networkWatcherName\": {\r\n                  \"value\": \"[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), parameters('networkWatcherName'), split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[8])]\"\r\n                },\r\n                \"flowlogName\": {\r\n                  \"value\": \"[if(empty(coalesce(field('Microsoft.Network/networkSecurityGroups/flowLogs'))), concat(take(concat(field('name'), '-', resourceGroup().name), 72), '-', 'flowlog'), split(first(field('Microsoft.Network/networkSecurityGroups/flowLogs[*].id')), '/')[10])]\"\r\n                },\r\n                \"location\": {\r\n                  \"value\": \"[field('location')]\"\r\n                },\r\n                \"targetResource\": {\r\n                  \"value\": \"[concat(resourceGroup().id, '/providers/Microsoft.Network/networkSecurityGroups/', field('name'))]\"\r\n                },\r\n                \"retentionDays\": {\r\n                  \"value\": \"[parameters('retentionDays')]\"\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"versions\": [\r\n      \"1.2.0\"\r\n    ]\r\n  },\r\n  \"id\": \"/providers/Microsoft.Authorization/policyDefinitions/e920df7f-9a64-4066-9b58-52684c02a091\",\r\n  \"name\": \"e920df7f-9a64-4066-9b58-52684c02a091\"\r\n}\r\n";


DefaultAzureCredential credential = new();

CosmosClient client = new(
    accountEndpoint: "",
    tokenCredential: new DefaultAzureCredential()
);

var cosmosClientWithoutIBLT = client
    .WithCosmosClientExtensions<Resource>();

var cosmosClient = client
    .WithCosmosClientExtensions<Resource>()
    .WithIBLTExtension();

var enableCosmosUpserts = true;
var totalIntegers = 100;

var sub = "baz";

await cosmosClient.GetAllResources(sub);

var exceptList = new List<Resource>();

for (int i = 0; i < totalIntegers && enableCosmosUpserts; i++)
{
    var resource = new Resource(id: $"{i}", subscription: sub, name: $"{i}", location: "dev", properties: extraLargePropertyBag);
    
    Console.WriteLine(i);

    await cosmosClient.UpsertItemAsync(resource);

    if (i < 32 && i > 29)
    {
        exceptList.Add(resource);
    }
}

var cachedResources = await cosmosClient.GetAllResources(sub);
cachedResources = cachedResources.SkipLast(2).ToArray();

Console.WriteLine($"=========== Test Diff RU difference ===========");

var diff1 = await cosmosClientWithoutIBLT.GetDiff(cachedResources, sub);

var diff2 = await cosmosClient.GetDiff(cachedResources, sub);

Console.WriteLine($"Result: diff1:{diff1?.Length}, diff2: {diff2?.Length}");

////=========== Test Diff RU difference ===========
////ExtendedCosmosClient:GetAllResources: 7.87 RU, returned 100 items
////ExtendedCosmosClient:ReadItemAsync: 1.05 RU
////Result: diff1:2, diff2: 2
////=========== Test Diff RU difference extra large ===========
////ExtendedCosmosClient: GetAllResources: 22.41 RU, returned 100 items
////ExtendedCosmosClient:ReadItemAsync: 1.05 RU
////Result: diff1: 2, diff2: 2